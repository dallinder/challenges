
[1mFrom:[0m /home/dan/Documents/launch_school/challenges/medium1/secret_handshake/secret_handshake.rb @ line 22 SecretHandshake#commands:

    [1;34m10[0m: [32mdef[0m [1;34mcommands[0m
    [1;34m11[0m:   [1;34m# use @number.[0m
    [1;34m12[0m:   [1;34m# if integer then convert to binary, refer to hash[0m
    [1;34m13[0m:   [1;34m# if string, check if valid binary, refer to hash[0m
    [1;34m14[0m:   result = []
    [1;34m15[0m: 
    [1;34m16[0m:   [32mif[0m @number.class == [1;34;4mInteger[0m
    [1;34m17[0m:     to_binary.chars.each_index [32mdo[0m |idx|
    [1;34m18[0m:       [32mif[0m @number[idx] == [1;34m1[0m
    [1;34m19[0m:         result << [1;34;4mCOMMANDS[0m[idx]
    [1;34m20[0m:       [32mend[0m
    [1;34m21[0m:     [32mend[0m
 => [1;34m22[0m:     binding.pry
    [1;34m23[0m:     [32mif[0m to_binary.size >= [1;34m4[0m
    [1;34m24[0m:       result.compact.reverse
    [1;34m25[0m:     [32melse[0m
    [1;34m26[0m:       result.compact
    [1;34m27[0m:     [32mend[0m
    [1;34m28[0m: 
    [1;34m29[0m:   [32melse[0m
    [1;34m30[0m:     [32mreturn[0m [1;34m0[0m [32mif[0m @number.to_i == [1;34m0[0m
    [1;34m31[0m:     @number.chars.each_index { |idx| result << [1;34;4mCOMMANDS[0m[idx] }
    [1;34m32[0m:   [32mend[0m
    [1;34m33[0m:   result.compact
    [1;34m34[0m: [32mend[0m

